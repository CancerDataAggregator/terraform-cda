name: 'Terraform Apply'
env:
  terraform_directory: "./cda"
  terraform_version: "0.13.5"
on:
  push:
    branches:
      - master
    paths:
      - '!old/**'
      - '!.github/**'
      - '.github/workflows/terraformMergeApply.yml'
      - 'cda/**'
jobs:
  terraform_apply:
    timeout-minutes: 180
    strategy:
      matrix:
        environment: [dev]
    if: "!contains( github.event.pull_request.labels.*.name, 'skip-ci')"
    name: '${{ matrix.environment }} Terraform Apply'
    runs-on: ubuntu-latest
    steps:
      - name: "${{ matrix.environment }} Checkout"
        uses: actions/checkout@v2

      - name: install terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraform_version }}

      - name: "${{ matrix.environment }} set VAULT_TOKEN"
        id: token
        run: |
          VAULT_TOKEN=$(curl \
            --request POST \
            --data '{"role_id":"'"${ROLE_ID}"'","secret_id":"'"${SECRET_ID}"'"}' \
            ${VAULT_ADDR}/v1/auth/approle/login | jq -r .auth.client_token)
          echo ::add-mask::${VAULT_TOKEN}
          echo "VAULT_TOKEN=$(echo ${VAULT_TOKEN})" >> $GITHUB_ENV
          echo ::set-output name=vault_token::${VAULT_TOKEN}
        env:
          ROLE_ID: ${{ secrets.ROLE_ID }}
          SECRET_ID: ${{ secrets.SECRET_ID }}
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}

      - name: "${{ matrix.environment }} consul-template render templates for terraform"
        uses: broadinstitute/github-action-consul-template@master
        with:
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-token: ${{ steps.token.outputs.vault_token }}
          environment: ${{ matrix.environment }}
          env_path: "cda"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: "${{ matrix.environment }} - Set backend config bucket"
        run: |
          ls -al
          echo 'bucket<<EOF' >> $GITHUB_ENV
          grep google_project ${{ matrix.environment }}.tfvars | awk '{print $3}' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        working-directory: ${{ env.terraform_directory }}/tfvars

      - name: "${{ matrix.environment }} - Terraform Init"
        id: init
        run: terraform init -backend-config=bucket=${{ env.bucket }}
        working-directory: ${{ env.terraform_directory }}

      - name: "${{ matrix.environment }} - Terraform Validate"
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: "${{ matrix.environment }} - Terraform Apply"
        id: plan
        run: terraform apply -var-file=tfvars/${{ matrix.environment }}.tfvars -input=false -auto-approve -no-color
        working-directory: ${{ env.terraform_directory }}
        continue-on-error: true
